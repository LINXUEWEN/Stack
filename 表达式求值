struct stack* creatStack()
{
	struct stack* myStack = (struct stack*)malloc(sizeof(struct stack));
	myStack->stacktop = NULL;
	myStack->size = 0;
	return myStack;
}

struct stacknode* creatStacknode(stack_data_type data)
{
	struct stacknode* newnode = (struct stacknode*)malloc(sizeof(struct stacknode));
	newnode->data = data;
	newnode->next = NULL;
	return newnode;
}


void stack_print(struct stack myStack)
{
	if (myStack.size == 0)
	{
		printf("栈中为空\n");
		return;
	}
	while (myStack.size--)
	{
		printf("%d ", myStack.stacktop->data-48);
		myStack.stacktop = myStack.stacktop->next;
	}
	printf("\n");
}


void push_stack_node(struct stack* myStack, stack_data_type data)
{
	struct stacknode* newnode = creatStacknode(data);
	newnode->next = myStack->stacktop;
	myStack->stacktop = newnode;
	myStack->size++;
}

stack_data_type get_top(struct stack* myStack)
{
	if (myStack->stacktop == NULL)
	{
		printf("栈内没有值，无法获取\n");
		return myStack->size;
	}
	return myStack->stacktop->data;
}

void pop_stack_node(struct stack* myStack)
{
	stack_data_type getnum = get_top(myStack);
	if (myStack->size == 0)
		return;
	struct stacknode* next = myStack->stacktop->next;
	free(myStack->stacktop);
	myStack->stacktop = next;
	myStack->size--;
}


void clear_stack(struct stack* myStack)
{
	if (myStack->size == 0)
		return;
	while (myStack->size)
	{
		pop_stack_node(myStack);
	}
}

void destroy_stack(struct stack* myStack)
{
	clear_stack(myStack);
	free(myStack);
	myStack = NULL;
}

int In(char ch)
{
	char arr[] = { '#', '%', '*', '-', '+', '/' ,'(',')'};
	int i = 0;
	for (i = 0; i < sizeof(arr); i++)
	{
		if (arr[i] == ch)
			return 1;
	}
	return 0;
}

char Precede(stack_data_type t1, stack_data_type t2, struct stack* Optr)
{
	char f = 0;
	switch (t2)
	{
	case '+':
		if (t1 == '(' || t1 == '#')
			f = '<';
		else
			f = '>';
		break;
	case '-':
		if (t1 == '(' || t1 == '#')
			f = '<';
		else
			f = '>';
		break;
	case '*':
		if (t1 == '*' || t1 == '/' || t1 == ')')
			f = '>';
		else
			f = '<';
		break;
	case '/':
		if (t1 == '*' || t1 == '/' || t1 == ')')
			f = '>';
		else
			f = '<';
		break;
	case '(':
		if (t1 != ')')
			f = '<';
		else
			pop_stack_node(Optr);
		break;
	case ')':
		if (t1 != '('&&t1 != '#')
			f = '>';
		else if (t1 == '(')
			f = '=';
		else
			pop_stack_node(Optr);
		break;
	case '#':
		if (t1 != '('&&t1 != '#')
			f = '>';
		else if (t1 == '(')
			pop_stack_node(Optr);
		else
			f = '#';
		break;
	default:
		printf("请输入合法字符\n");
		exit(-1);
		break;
	}
	return f;
}


int Operate(stack_data_type a, stack_data_type theta, stack_data_type b)
{
	switch (theta)
	{
	case '+':
		return a-48 + b ;
	case '-':
		return b - a+48;
	case '*':
		return (a - 48)*(b - 48) + 48;
	case '/':
		return (b-48) / (a-48)+48;
	}
}

void Test1()
{
	struct stack* Optr = NULL;
	struct stack* Opnd = NULL;
	Optr=creatStack();
	push_stack_node(Optr, '#');

	Opnd=creatStack();

	char ch = 0;
	ch = getchar();
	stack_data_type theta = 0;
	stack_data_type a = 0;
	stack_data_type b = 0;
	while (ch != '#' || get_top(Optr) != '#')
	{
		if (!In(ch))
		{
			push_stack_node(Opnd, ch);
			ch = getchar();
		}
		else
			switch (Precede(get_top(Optr), ch,Optr))
		{
			case '<':
				push_stack_node(Optr, ch);
				ch = getchar();
				break;
			case '>':

				theta = get_top(Optr);
				pop_stack_node(Optr);

				a = (stack_data_type)get_top(Opnd);
				pop_stack_node(Opnd);

				b = (stack_data_type)get_top(Opnd);
				pop_stack_node(Opnd);
				push_stack_node(Opnd, (stack_data_type)Operate(a, theta, b));
				break;
			case '=':
				pop_stack_node(Optr);
				ch = getchar();
				break;
		}
	}
	stack_print(*Opnd);
}
